













options:
    R_LIST_FORMAT: &9> &e[[priority]] &7[group] - [displayname] &7([prefix]&7)
    rm: &9Rank Manager>


on load:
    refreshRanks()
    checkForEmptyRanks()


function refreshRanks():
    loop {data::ranks::ranklist::*}:
        set {_n} to loop-value
        if {data::weight::letter::%{_n}%} = "z":
            set {data::ranks::%{_n}%::priority} to 2500
        else if {data::weight::letter::%{_n}%} = "y":
            set {data::ranks::%{_n}%::priority} to 2000
        else if {data::weight::letter::%{_n}%} = "x":
            set {data::ranks::%{_n}%::priority} to 1900
        else if {data::weight::letter::%{_n}%} = "w":
            set {data::ranks::%{_n}%::priority} to 1800
        else if {data::weight::letter::%{_n}%} = "v":
            set {data::ranks::%{_n}%::priority} to 1700
        else if {data::weight::letter::%{_n}%} = "u":
            set {data::ranks::%{_n}%::priority} to 1500
        else if {data::weight::letter::%{_n}%} = "t":
            set {data::ranks::%{_n}%::priority} to 1400
        else if {data::weight::letter::%{_n}%} = "s":
            set {data::ranks::%{_n}%::priority} to 1300
        else if {data::weight::letter::%{_n}%} = "r":
            set {data::ranks::%{_n}%::priority} to 1200
        else if {data::weight::letter::%{_n}%} = "q":
            set {data::ranks::%{_n}%::priority} to 1100
        else if {data::weight::letter::%{_n}%} = "p":
            set {data::ranks::%{_n}%::priority} to 1000
        else if {data::weight::letter::%{_n}%} = "o":
            set {data::ranks::%{_n}%::priority} to 950
        else if {data::weight::letter::%{_n}%} = "n":
            set {data::ranks::%{_n}%::priority} to 900
        else if {data::weight::letter::%{_n}%} = "m":
            set {data::ranks::%{_n}%::priority} to 850
        else if {data::weight::letter::%{_n}%} = "l":
            set {data::ranks::%{_n}%::priority} to 800
        else if {data::weight::letter::%{_n}%} = "k":
            set {data::ranks::%{_n}%::priority} to 700
        else if {data::weight::letter::%{_n}%} = "j":
            set {data::ranks::%{_n}%::priority} to 600
        else if {data::weight::letter::%{_n}%} = "i":
            set {data::ranks::%{_n}%::priority} to 500
        else if {data::weight::letter::%{_n}%} = "h":
            set {data::ranks::%{_n}%::priority} to 400
        else if {data::weight::letter::%{_n}%} = "g":
            set {data::ranks::%{_n}%::priority} to 350
        else if {data::weight::letter::%{_n}%} = "f":
            set {data::ranks::%{_n}%::priority} to 325
        else if {data::weight::letter::%{_n}%} = "e":
            set {data::ranks::%{_n}%::priority} to 300
        else if {data::weight::letter::%{_n}%} = "d":
            set {data::ranks::%{_n}%::priority} to 250
        else if {data::weight::letter::%{_n}%} = "c":
            set {data::ranks::%{_n}%::priority} to 100
        else if {data::weight::letter::%{_n}%} = "b":
            set {data::ranks::%{_n}%::priority} to 50
        else if {data::weight::letter::%{_n}%} = "a":
            set {data::ranks::%{_n}%::priority} to 0
command /rank [<text>] [<text>] [<text>] [<text>]:
    permission: easycore.rank
    permission message: &9Permissions> &7You do not have permission to do that.
    aliases: easycore:rank
    trigger:
        if arg 1 is not set:
            helpCMD(player)
        else if arg 1 is "list":
            listRanks(player)
        else if arg 1 is "help":
            helpCMD(player)
        else if arg 1 is "deletegroup":
            if arg 2 is set:
                deleteRank(player, arg 2)
            else:
                send "&9Rank Manager Error> &7Rank argument is missing."
        else if arg 1 is "creategroup":
            if arg 2 is set:
                if arg 3 is set:
                    if length of arg 3 < 2:
                        if arg 3 = "a" or "b" or "c" or "d" or "e" or "f" or "g" or "h" or "i" or "j" or "k" or "l" or "m" or "n" or "o" or "p" or "q" or "r" or "s" or "t" or "u" or "v" or "w" or "x" or "y" or "z":
                            createRankWithWeight(player, arg 2, arg 3)
                            stop
                        else:
                            send "&9Rank Manager Error> &7Invalid priority letter."
                    else:
                        send "&9Rank Manager Error> &7Invalid priority letter."
                else:
                    createRankWithoutWeight(player, arg 2)
                    stop
            else:
                send "&9Rank Manager Error> &7Rank argument is missing."
        else if arg 1 is "group":
            if arg 2 is set:
                if arg 3 is "setprefix":
                    if arg 4 is set:
                        setRankPrefix(player, arg 2, arg 4)
                        stop
                    else:
                        send "&9Rank Manager Error> &7Prefix argument is missing."
                else if arg 3 is "setsuffix":
                    if arg 4 is set:
                        setRankSuffix(player, arg 2, arg 4)
                        stop
                    else:
                        send "&9Rank Manager Error> &7Suffix argument is missing."
                else if arg 3 is "setdefault":
                    setDefaultRank(player, arg 2)
                    stop
                else if arg 3 is "setcolor":
                    if arg 4 is set:
                        setRankColor(player, arg 2, arg 4)
                        stop
                    else:
                        send "&9Rank Manager Error> &7Please supply a color, eg: &6dark_red, blue, etc&7."
                else if arg 3 is "setpriority":
                    if arg 4 is set:
                        if length of arg 4 < 2:
                            if arg 4 = "a" or "b" or "c" or "d" or "e" or "f" or "g" or "h" or "i" or "j" or "k" or "l" or "m" or "n" or "o" or "p" or "q" or "r" or "s" or "t" or "u" or "v" or "w" or "x" or "y" or "z":
                                setGroupLetterPriority(player, arg 2, arg 4)
                                stop
                            else:
                                send "&9Rank Manager Error> &7Invalid priority letter."
                        else:
                            send "&9Rank Manager Error> &7Invalid priority letter."
                    else:
                        send "&9Rank Manager Error> &7Please supply a priority, eg: &6a, b, c, etc&7."
                else if arg 3 is "setitalic":
                    setItalic(player, arg 2)
                    stop
                else if arg 3 is "setbold":
                    setBold(player, arg 2)
                    stop
                else if arg 3 is "setdisplayname":
                    if arg 4 is set:
                        setRankDisplayName(player, arg 2, arg 4)
                        stop
                    else:
                        send "&9Rank Manager Error> &7Argument for DISPLAY_NAME is missing."
                #not finished - else if arg 3 is "info":
                else:
                    send "&9Rank Manager Error> &7Please supply a valid method, eg: &6setprefix, setdefault, setcolor, etc&7."
            else:
                send "&9Rank Manager Error> &7Please supply a rank to modify."
        else:
            helpCMD(player)
               



        


        # if arg 1 is not set:
        #     helpCMD(player)
        #     stop
        # if arg 1 is not "group" or "player" or "help":
        #     send "&cUnknown method &7%arg 1%&c." and "&cPlease view &7/rank help &cfor more information."
        #     stop
        # if arg 2 is not "create" or "setdefault" or "setitalic" or "setpriority" or "setdisplayname" or "setbold" or "setcolor" or "help" or "delete" or "info" or "list" or "setprefix" or "setsuffix" or "setrank" or "setplayerprefix" or "setplayersuffix":
        #     send "&cUnknown sub-method&c." and "&cPlease view &7/rank help &cfor more information."
        #     stop
        # if arg 1 is "help":
        #     helpCMD(player)
        #     stop
        # if arg 1 is "group":
        #     if arg 2 is "setdefault":
        #         if arg 3 is set:
        #             setDefaultRank(player, arg 3)
        #             stop
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "setcolor":
        #         if arg 3 is set:
        #             if arg 4 is set:

        #                 setRankColor(player, arg 3, arg 4)
        #                 stop
        #             else:
        #                 send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "create":
        #         if arg 3 is set:
        #             if arg 4 is set:
        #                 if length of arg 4 < 2:
        #                     if arg 4 = "a" or "b" or "c" or "d" or "e" or "f" or "g" or "h" or "i" or "j" or "k" or "l" or "m" or "n" or "o" or "p" or "q" or "r" or "s" or "t" or "u" or "v" or "w" or "x" or "y" or "z":
        #                         createRankWithWeight(player, arg 3, arg 4)
        #                         stop
        #                     else:
        #                         send "&cThat's not a valid letter!"
        #                 else:
        #                     send "&cThat's not a valid letter!"
        #             else:
        #                 createRankWithoutWeight(player, arg 3)
        #                 stop
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "setpriority":
        #         if arg 3 is set:
        #             if arg 4 is set:
        #                 if length of arg 4 < 2:
        #                     if arg 4 = "a" or "b" or "c" or "d" or "e" or "f" or "g" or "h" or "i" or "j" or "k" or "l" or "m" or "n" or "o" or "p" or "q" or "r" or "s" or "t" or "u" or "v" or "w" or "x" or "y" or "z":
        #                         setGroupLetterPriority(player, arg 3, arg 4)
        #                         stop
        #             else:
        #                 send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "setitalic":
        #         if arg 3 is set:
        #             setItalic(player, arg 3)
        #             stop
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "setbold":
        #         if arg 3 is set:
        #             setBold(player, arg 3)
        #             stop
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "delete":
        #         if arg 3 is set:
        #             deleteRank(player, arg 3)
        #             stop
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "info":
        #         if arg 3 is set:
        #             infoRank(player, arg 3)
        #             stop
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "list":
        #         listRanks(player)
        #         stop
        # if arg 1 is "group":
        #     if arg 2 is "setprefix":
        #         if arg 3 is set:
        #             if arg 4 is set:
        #                 setRankPrefix(player, arg 3, arg 4)
        #                 stop
        #             else:
        #                 send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "setdisplayname":
        #         if arg 3 is set:
        #             if arg 4 is set:
        #                 setRankDisplayName(player, arg 3, arg 4)
        #                 stop
        #             else:
        #                 send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "group":
        #     if arg 2 is "setsuffix":
        #         if arg 3 is set:
        #             if arg 4 is set:
        #                 setRankSuffix(player, arg 3, arg 4)
        #                 stop
        #             else:
        #                 send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "player":
        #     if arg 2 is "setrank":
        #         if arg 3 is set:
        #             if arg 4 is set:
        #                 set {_a2} to arg 3 parsed as a player
        #                 setPlayerRank(player, {_a2}, arg 4)
        #                 stop
        #             else:
        #                 send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "player":
        #     if arg 2 is "setprefix":
        #         if arg 3 is set:
        #             if arg 4 is set:
        #                 set {_a2} to arg 3 parsed as a player
        #                 setPlayerPrefix(player, {_a2}, arg 4)
        #             else:
        #                 send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        # if arg 1 is "player":
        #     if arg 2 is "setsuffix":
        #         if arg 3 is set:
        #             if arg 4 is set:
        #                 set {_a2} to arg 3 parsed as a player
        #                 setPlayerSuffix(player, {_a2}, arg 4)
        #             else:
        #                 send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."
        #         else:
        #             send "&cMissing or unknown arguments." and "&cPlease view &7/rank help &cfor more information."

function helpCMD(p: player):
    send "&9Rank Manager> &7Commands List:" to {_p}
    send "" to {_p}
    send " &4/rank &7creategroup &4<name> &7[priority] &4Admin" to {_p}
    send " &4/rank &7deletegroup &4<name> &7[priority] &4Admin" to {_p}
    send " &4/rank &7list &4Admin" to {_p}
    send " &4/rank &7group &4<group> &7setdisplayname &7<display> &4Admin" to {_p}
    send " &4/rank &7group &4<group> &7setprefix &7<prefix> &4Admin" to {_p}
    send " &4/rank &7group &4<group> &7setsuffix &7<suffix> &4Admin" to {_p}
    send " &4/rank &7group &4<group> &7setitalic &4Admin" to {_p}
    send " &4/rank &7group &4<group> &7setbold &4Admin" to {_p}
    send " &4/rank &7group &4<group> &7setdefault &4Admin" to {_p}
    send " &4/rank &7user &4<player> &7setprefix &7<prefix> &4Admin" to {_p}
    send " &4/rank &7user &4<player> &7setsuffix &7<prefix> &4Admin" to {_p}
    send " &4/rank &7user &4<player> &7addperm &7<permission> &4Admin" to {_p}
    send "" to {_p}
every 10 seconds:
    loop {data::ranks::ranklist::*}:
        if {data::ranks::%loop-value%::prefix} is not set:
            set {data::ranks::%loop-value%::prefix} to ""

function infoRank(p: player, n: text):
    # revamp
    stop

function setDefaultRank(p: player, t: text):
    if {data::ranks::ranklist::*} contains {_t}:
        set {data::ranks::defaultgroup} to "%{_t}%"
        set {_display} to getGroupDisplayName({_t})
        send "{@rm} &7Default rank has been set to %{_display} in propercase%&7." to {_p}
        send "{@rm} &7Players will be given %{_display} in propercase%&7 on first join" to {_p}
    else:
        send "{@rm} &7Unknown rank &6%{_t}%&7." to {_p}


function consoleSetDefaultRank(t: text):
    if {data::ranks::ranklist::*} contains {_t}:
        set {data::ranks::defaultgroup} to "%{_t}%"
        set {_display} to getGroupDisplayName({_t})
        send "{@rm} &7Default rank has been set to %{_display} in propercase%&7." to console
        send "{@rm} &7Players will be given %{_display} in propercase%&7 on first join" to console

on first join:
    if {data::ranks::defaultgroup} is set:
        cspr(player, {data::ranks::defaultgroup})
        send "&fYou were granted %{data::ranks::defaultgroup}%"
        stop
        set player's default nametag to "%colored {data::ranks::player::%player's uuid%::prefix}% &e%player%"
    else:
        send "{@rm} &7No default rank is set! Couldn't give rank." to console
        stop

on join:
    loadData(player)

function loadData(p: player):
    set {data::ranks::player::%{_p}'s uuid%::prefix} to "%{data::ranks::%{data::ranks::player::%{_p}'s uuid%::group}%::prefix}%"
    set {data::ranks::player::%{_p}'s uuid%::color} to "%{data::ranks::%{data::ranks::player::%{_p}'s uuid%::group}%::color}%"

    set {_time} To a random integer between 2 and 5
    set {_end} To "%{_time}% seconds" parsed as a time span
    set {_color} to getPlayerColor({_p})
    set {_p}'s default nametag to "%{_color}%%{_p}%"
    wait {_end}
    send "&9Database Manager> &7Loaded data of %{_p}%&7." to console
    set {_rank} to getPlayerGroup({_p})
    set {_display} to getGroupDisplayName({_rank})
    send "&9Database Manager> &7Your rank %{_display} in propercase% &7has loaded." to {_p}

every 10 seconds:
    loop all players:
        if size of {data::ranks::ranklist::*} is 0:
            cspr(loop-player, "default")
        else:
            set {data::ranks::player::%loop-player's uuid%::prefix} to "%{data::ranks::%{data::ranks::player::%loop-player's uuid%::group}%::prefix}%"
            set {data::ranks::player::%loop-player's uuid%::color} to "%{data::ranks::%{data::ranks::player::%loop-player's uuid%::group}%::color}%"
        #send "&7Saved all your data." to loop-player
every 2 seconds:
    loop all players:
        updateTabName(loop-player)


function updateTabName(p: player):
    if {vanish::%{_p}%} is not set:
        set {_p}'s tablist name to colored {data::ranks::player::%{_p}'s uuid%::tabdisplay}
    else:
        stop

function setPlayerRank(p: player, t: player, r: text):
    if {data::ranks::ranklist::*} contains {_r}:

        add {_t} to {data::ranks::%{_r}%::list::*}

        set {_group} to getPlayerGroup({_t})
        set {_oldDisplay} to getGroupDisplayName({_group})

        set {data::ranks::player::%{_t}'s uuid%::group} to "%{_r}%"
        set {_displayname} to getGroupDisplayName({data::ranks::player::%{_t}'s uuid%::group})

        send "&9Client Manager> &7Your rank has been updated to %{_displayname}%&7!" to {_t}

        set {data::ranks::player::%{_t}'s uuid%::prefix} to "%{data::ranks::%{_r}%::prefix}%"
        set {data::ranks::player::%{_t}'s uuid%::color} to "%{data::ranks::%{_r}%::color}%"
        set {data::ranks::player::%{_t}'s uuid%::tabdisplay} to "%{data::ranks::%{_r}%::prefix}% &f%{_t}%"
        set {_color} to getPlayerColor({_t})
        set {_t}'s default nametag to "%{data::ranks::%{_r}%::prefix}% &f%{_t}%"
        send "&9Client Manager> &7%{_t}%'s rank has been updated to %{_r} in uppercase%&7!" to {_p}

    else:
        send "&9Rank Manager Error> &7Unknown rank &6%{_r}%&7." to {_p}

function cspr(p: player, r: text):
    if {data::ranks::ranklist::*} contains {_r}:
        add {_p} to {data::ranks::%{_r}%::list::*}
        execute console command "luckperms:permissions user %{_t}% parent set %{_r}%"
        set {data::ranks::player::%{_p}'s uuid%::prefix} to "%{data::ranks::%{_r}%::prefix}%"
        set {data::ranks::player::%{_p}'s uuid%::color} to "%{data::ranks::%{_r}%::color}%"
        set {data::ranks::player::%{_p}'s uuid%::group} to "%{_r}%"
        set {data::ranks::player::%{_p}'s uuid%::tabdisplay} to "%{data::ranks::%{_r}%::prefix}% &f%{_p}%"

command /updaterank [<offline player>] [<text>]:
    permission: easycore.updateranks
    permission message: &9Permissions> &7You do not have permission to do that.
    aliases: easycore:updaterank
    trigger:
        if arg 1 is not set:
            send "&9Rank Manager> &7Commands List:"
            send "&4/updaterank &7<player> <rank> &4Admin"
        else:
            if arg 2 is not set:
                send "&9Client Manager Error> &7Rank argument is missing." to player
                stop
            else:
                setPlayerRank(player, arg 1, arg 2)
                
            

function setRankColor(p: player, r: text, c: text):
    if {data::ranks::ranklist::*} contains {_r}:
        if {_c} = "dark_red":
            set {data::ranks::%{_r}%::color} to "§4"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now §4dark_red&7." to {_p}
            stop
        else if {_c} = "red":
            set {data::ranks::%{_r}%::color} to "§c"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now §cred&7." to {_p}
            stop
        else if {_c} = "gold":
            set {data::ranks::%{_r}%::color} to "§6"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now §6gold&7." to {_p}
            stop
        else if {_c} = "yellow":
            set {data::ranks::%{_r}%::color} to "§e"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now §eyellow&7." to {_p}
            stop
        else if {_c} = "dark_green":
            set {data::ranks::%{_r}%::color} to "§2"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now §2dark_green&7." to {_p}
            stop
        else if {_c} = "green":
            set {data::ranks::%{_r}%::color} to "§a"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now §agreen&7." to {_p}
            stop
        else if {_c} = "cyan":
            set {data::ranks::%{_r}%::color} to "§3"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &3cyan&7." to {_p}
            stop
        else if {_c} = "dark_blue":
            set {data::ranks::%{_r}%::color} to "§1"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &1dark blue&7." to {_p}
            stop
        else if {_c} = "blue":
            set {data::ranks::%{_r}%::color} to "§9"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &9blue&7." to {_p}
            stop
        else if {_c} = "pink":
            set {data::ranks::%{_r}%::color} to "§d"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &dpink&7." to {_p}
            stop
        else if {_c} = "purple":
            set {data::ranks::%{_r}%::color} to "§5"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &5purple&7." to {_p}
            stop
        else if {_c} = "white":
            set {data::ranks::%{_r}%::color} to "§f"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &fwhite&7." to {_p}
            stop
        else if {_c} = "gray":
            set {data::ranks::%{_r}%::color} to "§7"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &7gray&7." to {_p}
            stop
        else if {_c} = "dark_gray":
            set {data::ranks::%{_r}%::color} to "§8"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &8dark_gray&7." to {_p}
            stop
        else if {_c} = "black":
            set {data::ranks::%{_r}%::color} to "§0"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &0black&7." to {_p}
            stop
        else if {_c} = "aqua":
            set {data::ranks::%{_r}%::color} to "§b"
            send "{@rm} &7Color of %{_r} in uppercase% &7is now &baqua&7." to {_p}
            stop
        else:
            send "&9Rank Manager Error> &7Sorry, but I don't know that color!" to {_p}
    else:
        send "&9Rank Manager Error> &7Unknown rank &6%{_r}%&7." to {_p}

function setRankPrefix(p: player, g: text, v: text):
    if {data::ranks::ranklist::*} contains {_g}:
        set {data::ranks::%{_g}%::prefix} to "%{_v}%"
        set {data::ranks::%{_g}%::tabdisplay} to "%{data::ranks::%{_g}%::prefix}%"
        execute console command "luckperms:permissions group %{_g}% meta setprefix %{_v}%"
        send "{@rm} &7Rank meta prefix of %{_g} in uppercase% &7was updated to - %colored {_v}%" to {_p}
    else:
        send "&9Rank Manager Error> &7Unknown rank &6%{_g}%&7." to {_p}

function consoleSetRankPrefix(g: text, v: text):
    if {data::ranks::ranklist::*} contains {_g}:
        set {data::ranks::%{_g}%::prefix} to "%{_v}%"
        set {data::ranks::%{_g}%::tabdisplay} to "%{data::ranks::%{_g}%::prefix}%"
        execute console command "luckperms:permissions group %{_g}% meta setprefix %{_v}%"
        send "{@rm} &7Rank meta prefix of %{_g} in uppercase% &7was updated to - %colored {_v}%" to console

function setItalic(p: player, r: text):
    if {data::ranks::ranklist::*} contains {_r}:
        set {data::ranks::%{_r}%::color} to "%{data::ranks::%{_r}%::color}%&o"
        send "{@rm} &7Rank meta italic of %{_r} in uppercase% &7was updated to - %{data::ranks::%{_r}%::color}%" to {_p}

    else:
        send "&9Rank Manager Error> &7Unknown rank &6%{_r}%&7." to {_p}

function setBold(p: player, r: text):
    if {data::ranks::ranklist::*} contains {_r}:
        set {data::ranks::%{_r}%::color} to "%{data::ranks::%{_r}%::color}%&l"
        send "{@rm} &7Rank meta bold of %{_r} in uppercase% &7was updated to - %{data::ranks::%{_r}%::color}%" to {_p}

    else:
        send "&9Rank Manager Error> &7Unknown rank &6%{_r}%&7." to {_p}


function setPlayerPrefix(p: player, t: player, r: text):
    set {data::ranks::player::%{_t}'s uuid%::prefix} to colored {_r}
    send "&9Client Manager> &7Player meta prefix of &6%{_t}% &7was updated to - %colored {_r}%" to {_p}
    send "&9Client Manager> &7Your prefix was updated to - %colored {_r}%" to {_t}

function setPlayerSuffix(p: player, t: player, r: text):
    set {data::ranks::player::%{_t}'s uuid%::suffix} to colored {_r}
    send "&9Client Manager> &7Player meta prefix of &6%{_t}% &7was updated to - %colored {_r}%" to {_p}
    send "&9Client Manager> &7Your prefix was updated to - %colored {_r}%" to {_t}

function setRankSuffix(p: player, g: text, v: text):
    if {data::ranks::ranklist::*} contains {_g}:
        set {data::ranks::%{_g}%::suffix} to "%{_v}%"
        execute console command "luckperms:permissions group %{_g}% meta setsuffix %{_v}%"
        send "{@rm} &7Rank meta suffix of %{_g} in uppercase% &7was updated to - %colored {_v}%" to {_p}
    else:
        send "&9Rank Manager Error> &7Unknown rank &6%{_g}%&7." to {_p}

function createRankWithWeight(p: player, n: string, letter: text):
    if {data::ranks::ranklist::*} contains "%{_n}%":
        send "&cThat rank already exists!" to {_p}
        stop
    else:
        execute console command "luckperms:permissions creategroup %{_n}%"
        set {data::ranks::%{_n}%::displayname} to "&f%{_n} in proper case%"
        set {data::weight::letter::%{_n}%} to {_letter}
        set {data::ranks::%{_n}%::group} to {_n}
        set {_format} to "{@R_LIST_FORMAT}"
        replace all "[priority]" in {_format} with {_letter}
        replace all "[displayname]" in {_format} with "&f%{_n} in proper case%"
        replace all "[group]" in {_format} with {_n} in upper case
        replace all "[prefix]" in {_format} with "&cNone"
        add {_format} to {data::ranks::rankletter::*}
        send "{@rm} &7Created new rank %{_n} in uppercase% &7with l-priority &6%{_letter} in uppercase%&7." to {_p}

        add "%{_n}%" to {data::ranks::ranklist::*}

        refreshRanks()

function createRankWithoutWeight(p: player, n: string):
    if {data::ranks::ranklist::*} contains "%{_n}%":
        send "&cThat rank already exists!" to {_p}
        stop
    else:
        execute console command "luckperms:permissions creategroup %{_n}%"
        set {data::ranks::%{_n}%::displayname} to "&f%{_n} in proper case%"
        set {data::weight::letter::%{_n}%} to "a"
        set {data::ranks::%{_n}%::group} to {_n}
        set {_format} to "{@R_LIST_FORMAT}"
        replace all "[priority]" in {_format} with "a"
        replace all "[displayname]" in {_format} with "&f%{_n} in upper case%"
        replace all "[group]" in {_format} with {_n} in proper case
        
        add {_format} to {data::ranks::rankletter::*}
        send "{@rm} &7Created new rank %{_n} in uppercase% &7with l-priority &6A&7." to {_p}

        add "%{_n}%" to {data::ranks::ranklist::*}
        refreshRanks()

function consoleCreateRank(n: string):
    if {data::ranks::ranklist::*} contains "%{_n}%":
        send "&cThat rank already exists!" to {_p}
        stop
    else:
        execute console command "luckperms:permissions creategroup %{_n}%"
        set {data::ranks::%{_n}%::displayname} to "&f%{_n} in proper case%"
        set {data::weight::letter::%{_n}%} to "a"
        set {data::ranks::%{_n}%::group} to {_n}
        set {_format} to "{@R_LIST_FORMAT}"
        replace all "[priority]" in {_format} with "a"
        replace all "[displayname]" in {_format} with "&f%{_n} in upper case%"
        replace all "[group]" in {_format} with {_n} in proper case
        
        add {_format} to {data::ranks::rankletter::*}
        send "{@rm} &7Created new rank %{_n} in uppercase% &7with l-priority &6A&7." to console

        add "%{_n}%" to {data::ranks::ranklist::*}
        refreshRanks()

function deleteRank(p: player, n: string):
    if {data::ranks::ranklist::*} doesn't contain "%{_n}%":
        send "&9Rank Manager Error> &7Unknown rank &6%{_n}%&7." to {_p}
        stop
    else:
        execute console command "luckperms:permissions deletegroup %{_n}%"
        send "{@rm} &7Successfully deleted %{_n} in uppercase% &7from our database." to {_p}
        set {_format} to "{@R_LIST_FORMAT}"
        remove {_n} from {data::ranks::ranklist::*}
        remove "&9> &e[%{data::weight::letter::%{_n}%} in uppercase%-%{data::ranks::%{_n}%::priority}%&e] &7%{data::ranks::%{_n}%::group} in uppercase% - %{data::ranks::%{_n}%::displayname} in propercase% &7(%colored {data::ranks::%{_n}%::prefix}%&7) &e[R] &7(%{data::ranks::%{_n}%::prefix}%&7)" from {data::ranks::rankletter::*}

        delete {data::ranks::%{_n}%::*}

        checkForEmptyRanks()

function getPlayerColor(p: player) :: text:
    if {data::ranks::player::%{_p}'s uuid%::color} is set:
        return {data::ranks::player::%{_p}'s uuid%::color}
    else:
        return "&cnone"

function getPlayerPrefix(p: player) :: text:
    if {data::ranks::player::%{_p}'s uuid%::prefix} is set:
        return {data::ranks::player::%{_p}'s uuid%::prefix}
    else:
        return "&cnone"

function getPlayerGroup(p: player) :: text:
    if {data::ranks::player::%{_p}'s uuid%::group} is set:
        return {data::ranks::player::%{_p}'s uuid%::group}
    else:
        return "&cnone"

function getGroupColor(rank: text) :: text:
    return {data::ranks::%{_rank}%::color}

function getGroupDisplayName(rank: text) :: text:
    return {data::ranks::%{_rank}%::displayname}


function listRanks(p: player):
    delete {data::ranks::rankletter::*}
    set {_format} to "{@R_LIST_FORMAT}"
    refreshRanks()
    loop {data::ranks::ranklist::*}:
        add "&9> &e[%{data::weight::letter::%loop-value%} in uppercase%-%{data::ranks::%loop-value%::priority}%&e] &7%{data::ranks::%loop-value%::group} in uppercase% - %{data::ranks::%loop-value%::displayname} in propercase% &7(%colored {data::ranks::%loop-value%::prefix}%&7) &e[R] &7(%{data::ranks::%loop-value%::prefix}%&7)" to {data::ranks::rankletter::*}
    set {_sorted::*} to (alphabetically sorted {data::ranks::rankletter::*})
    set {_value::*} to reversed {_sorted::*}
    send "{@rm} &7Created ranks" to {_p}
    send "" to {_p}
    loop {_value::*}:
        send "%loop-value%" to {_p}
    send "" to {_p}


function setRankDisplayName(p: player, r: text, value: text):
    if {data::ranks::ranklist::*} contains {_r}:
        set {data::ranks::%{_r}%::displayname} to colored {_value} in proper case
        send "{@rm} &7Updated displayname of %{_r} in uppercase% &7to - %colored {_value} in proper case%" to {_p}

    else:
        send "&9Rank Manager Error> &7Unknown rank &6%{_r}%&7." to {_p}



function setGroupLetterPriority(p: player, r: text, value: text):
    if {data::ranks::ranklist::*} contains {_r}:
        set {data::weight::letter::%{_r}%} to "%{_value}%"
        send "{@rm} &7Updated priority of %{_r} in uppercase% &7to &6%{_value} in proper case%" to {_p}

    else:
        send "&9Rank Manager Error> &7Unknown rank &6%{_r}%&7." to {_p}

on load:
    loop {data::ranks::ranklist::*}:
        if getGroupColor(loop-value) = "&4":
            set {block::%loop-value%} to red wool
        else if getGroupColor(loop-value) = "&9" or "&9&o" or "&9&l" or "&9&l&o" or "&9&o&l":
            set {block::%loop-value%} to blue wool
        else if getGroupColor(loop-value) = "&f" or "&f&o" or "&f&l" or "&f&l&o" or "&f&o&l":
            set {block::%loop-value%} to white wool
        else if getGroupColor(loop-value) = "&7" or "&7&o" or "&7&l" or "&7&l&o" or "&7&o&l":
            set {block::%loop-value%} to light gray wool
        else if getGroupColor(loop-value) = "&c" or "&c&o" or "&c&l" or "&c&l&o" or "&c&o&l":
            set {block::%loop-value%} to red wool
        else if getGroupColor(loop-value) = "&a" or "&a&o" or "&a&l" or "&a&l&o" or "&a&o&l":
            set {block::%loop-value%} to lime wool
        else if getGroupColor(loop-value) = "&d" or "&d&o" or "&d&l" or "&d&l&o" or "&d&o&l":
            set {block::%loop-value%} to pink wool
        else if getGroupColor(loop-value) = "&3" or "&3&o" or "&3&l" or "&3&l&o" or "&3&o&l":
            set {block::%loop-value%} to cyan wool
        else if getGroupColor(loop-value) = "&5" or "&5&o" or "&5&l" or "&5&l&o" or "&5&o&l":
            set {block::%loop-value%} to purple wool
        else if getGroupColor(loop-value) = "&2" or "&2&o" or "&2&l" or "&2&l&o" or "&2&o&l":
            set {block::%loop-value%} to dark green wool
        else if getGroupColor(loop-value) = "&8" or "&8&o" or "&8&l" or "&8&l&o" or "&8&o&l":
            set {block::%loop-value%} to gray wool
        else if getGroupColor(loop-value) = "&e" or "&e&o" or "&e&l" or "&e&l&o" or "&e&o&l":
            set {block::%loop-value%} to yellow wool
        else if getGroupColor(loop-value) = "&6" or "&6&o" or "&6&l" or "&6&l&o" or "&6&o&l":
            set {block::%loop-value%} to orange wool
        else if getGroupColor(loop-value) = "&b" or "&b&o" or "&b&l" or "&b&l&o" or "&b&o&l":
            set {block::%loop-value%} to light blue wool
        else if getGroupColor(loop-value) = "&1" or "&1&o" or "&1&l" or "&1&l&o" or "&1&o&l":
            set {block::%loop-value%} to blue wool
        else if getGroupColor(loop-value) is not set:
            set {block::%loop-value%} to white wool


function checkForEmptyRanks():
    if size of {data::ranks::ranklist::*} is 0:
        send "&9Rank Manager Error> &7No ranks have been created yet. Creating new default rank." to console
        consoleCreateRank("default")
        consoleSetDefaultRank("default")
        consoleSetRankPrefix("default", "&7Default &f")

command /priority:
    trigger:
        set {_g} to getPlayerGroup(player)
        loop {data::ranks::ranklist::*}:
            set {_display} to getGroupDisplayName(loop-value)
            set {_d2} to getGroupDisplayName({_g})
            if {data::ranks::%loop-value%::priority} < {data::ranks::%{_g}%::priority}:
                send "&aYour priority %{_d2}% &7[&c%{data::ranks::%{_g}%::priority}%&7]&a is above %{_display}% &7[&c%{data::ranks::%loop-value%::priority}%&7]"










# +----------------------------------------------------------------------------------------------+ #
# |                                                                                              | #
# |                                       CONFIGURATION                                          | #
# |                                                                                              | #
# |                                  Configuration for easyCore                                  | #
# |                                                                                              | #
# +----------------------------------------------------------------------------------------------+ #





options:

    PREFIX: null
    REPORT_PREFIX: &9Report> &7
    STAFF_PREFIX: &8Staff Join> 

    PLAYER_NOT_ONLINE: &9Search> &7No players found with that name.
    NO_PERMISSION: &9Permissions> &7You do not have permission to do that.

# REPORT
    LIST-ALL-FORMAT: &9List> &7There are a total of &6[players]&7/&6[max] &7players online&7: %nl%&f%nl%&e[list]
    REPORT-DOESNT-HAVE: &9Report Search> &7[target] &7doesn't have any reports recorded.
    REPORT-FORMAT: &9Report Received> &7Report of [reported] &7by [reporter] &7for &6[reason]&7.
    REPORT-CHECK: &9Report Search> &7[reported] &7was reported by &7[reporter] &7for &6[reason]&7 at &e[date]&7.
    REPORT-CLEAR: &9Report Clear> &7Successfully cleared [target]'s &7reports.
    REPORT-COOLDOWN: &9Chat Manager> &7You are on cooldown for &6[time]&7.
    REPORT-COOLDOWN-AMOUNT: 10 seconds
    REPORT-TO-PLAYER: &aThanks for submitting your report. Staff will take a look at it!
    REPORT-CANT-REPORT-YOURSELF: &cYou can't report yourself!
# GAMEMODE
    ALREADY-HAVE: &9Gamemode> &7Your gamemode is already &6[gamemode]&7.
    UPDATED: &9Gamemode> &7[gamemode]: &aTrue
    ALREADY-HAVE-OTHER: &9Gamemode Error> &7Gamemode of [player] &7is already set to [gamemode]&7.
    UPDATED-OTHER-SENDER: &9Gamemode> &7[gamemode] of [player]&7: &aTrue
    UPDATED-OTHER-TARGET: &9Gamemode> &7[gamemode]: &aTrue &7by [sender]&7.
    WRONG: &9Gamemode> &7[gamemode] &7is not a valid gamemode.
#GOD-MODE
    GOD-ENABLED: &9Status> &7Invincible: &aTrue
    GOD-ENABLED-OTHER-SENDER: &9Status> &7Invincibility for [player]&7: &aTrue
    GOD-DISABLED-OTHER-SENDER: &9Status> &7Invincibility for [player]&7: &cFalse
    GOD-DISABLED: &9Status> &7Invincible: &cFalse
#STAFF-CONNECT-DISCONNECT
    STAFF-CONNECT: %{sp}% &7[player]
    STAFF-DISCONNECT: %{sp}% &7[player]
#STAFF-CHAT
    STAFF-CHAT-ENABLED: %{pr}% &eStaff Chat is now &aenabled&e!
    STAFF-CHAT-DISABLED: %{pr}% &eStaff Chat is now &cdisabled&e!
    STAFF-CHAT-FORMAT: %{sp}% &7(server) [player]&b: [message]
#ADMIN-CHAT
    ADMIN-CHAT-ENABLED: %{pr}% &eAdmin Chat is now &aenabled&e!
    ADMIN-CHAT-DISABLED: %{pr}% &eAdmin Chat is now &cdisabled&e!
    ADMIN-CHAT-FORMAT: &c[AC] &7(server) [player]&b: [message]
#BROADCAST
    BROADCAST-FORMAT: &7[&dBroadcast&7] &e[message]
#INVENTORY-CLEAR
    CLEAR-SELF: %{pr}% &eYou have cleared your inventory. (&d[total] total items&e)
    CLEAR-OTHER-SENDER: %{pr}% &eYou have cleared &f&o[target]'s &einventory. &e(&d[total] total items&e)
    CLEAR-OTHER-TARGET: %{pr}% &eYour inventory has been cleared by &f&o[player]&e. &e(&d[total] total items&e)
#PING:
    PING-SELF: &eYour ping&7: &d[ping] ms
    PING-OTHER: &e[target]'s &eping&7: &d[ping] ms
#HEAL
    HEAL: %{pr}% &eYou healed [target-with]&e.
    HEAL-STAFF: &8&o[[player]&8&o: &7healed &7[target-without]&8&o]
#FEED
    FEED: %{pr}% &eYou feeded [target-with]&e.
    FEED-STAFF: &8&o[[player]&8&o: &7feeded &7[target-without]&8&o]
#SKUll
    SKULL-GIVEN: &7You received [player]'s &7skull.
#MORE
    INVALID-MORE-ITEM: &cYou can't be holding air!
    MORE-SUCCESS: &eSuccessfully set &dhand item amount &eto its max amount.

#TELEPORT
    TP-TARGET: &eYou teleported to [target]&e.
    TP-PLAYER-STAFF-FORMAT: &8&o[[player]&8&o: &7teleported to [target]&8&o]

    TO-COORDS: &eYou teleported to &dx: [x]&e, &dy: [y]&e, &dz: [z]&e.
    TO-COORDS-SENDER: &eYou teleported &6[target] &eto &dx: [x]&e, &dy: [y]&e, &dz: [z]&e.
    TO-COORDS-STAFF: &8&o[[player]&8&o: &7teleported to [x] [y] [z]&8&o]
    TO-COORDS-STAFF-OTHER: &8&o[[player]&8&o: &7teleported [target] &7to [x], [y], [z]&8&o]
    #TP-HERE
    TP-HERE-SENDER: &eYou teleported [target] &eto &dYou&e.
    #TP-HERE-TARGET:
    TP-HERE-STAFF-FORMAT: &8&o[[player]&8&o: &7teleported [target] &7to &7[player-without]&8&o]
    OFFLINE-PLAYER-FAILED: &cSorry, but we couldn't find the last online location of that player!
    OFFLINE-PLAYER-SUCCESS: &eYou teleported to &6[player]'s &elast logged location.
#VANISH:
    VANISH-SELF: &eYou are now &dvanished&e.
    UNVANISH-SELF: &eYou are now &dvisible&e.
    VANISH-SELF-STAFF: &8&o[[player]&8&o: &7vanished&8&o]
    UNVANISH-SELF-STAFF: &8&o[[player]&8&o: &7unvanished&8&o]
    #OTHER
    VANISH-OTHER: &6[target] &eis now &dvanished&e.
    UNVANISH-OTHER: &6[target] &eis now &dvisible&e.
    VANISH-OTHER-STAFF: &8&o[[player]&8&o: &7vanished [target]&8&o]
    UNVANISH-OTHER-STAFF: &8&o[[player]&8&o: &7unvanished [target]&8&o]

    VANISH-TAG: &7[V] [player]

on load:
    set {pr} to "{@PREFIX}"
    set {rp} to "{@REPORT_PREFIX}"
    set {sp} to "{@STAFF_PREFIX}"



# +----------------------------------------------------------------------------------------------+ #
# |                                                                                              | #
# |                                         CODE                                                 | #
# |                          do not touch unless you know what you're doing!                     | #
# |                                                                                              | #
# |                                Code to make the skript work                                  | #
# |                                                                                              | #
# +----------------------------------------------------------------------------------------------+ #
# +----------------------------------------------------------------------------------------------+ #
# |                                                                                              | #
# |                                         CODE                                                 | #
# |                          do not touch unless you know what you're doing!                     | #
# |                                                                                              | #
# |                                Code to make the skript work                                  | #
# |                                                                                              | #
# +----------------------------------------------------------------------------------------------+ #
# +----------------------------------------------------------------------------------------------+ #
# |                                                                                              | #
# |                                         CODE                                                 | #
# |                          do not touch unless you know what you're doing!                     | #
# |                                                                                              | #
# |                                Code to make the skript work                                  | #
# |                                                                                              | #
# +----------------------------------------------------------------------------------------------+ #

command /report <player> <text>:
    usage: &cMissing arguments! /report <player> <reason>
    aliases: easycore:report
    trigger:
        if arg 1 = player:
            send "{@REPORT-CANT-REPORT-YOURSELF}"

        set {_w} to difference between {cooldown::report::%player%::lastused} and now
        if {_w} < {@REPORT-COOLDOWN-AMOUNT}:
            set {_value} to difference between {@REPORT-COOLDOWN-AMOUNT} and {_w}
            set {_str} to timespanFormat({_value})
            set {_message} to "{@REPORT-COOLDOWN}"
            replace every "[time]" in {_message} with "%{_str}%"
            send "%{_message}%"
            stop

        set {cooldown::report::%player%::lastused} to now
        reportPlayer(arg 1, player, arg 2)

function timespanFormat(value: timespan) :: text:
    set {_str} to "%{_value}%"
    set {_l::*} to split {_str} at " "
    loop {_l::*}:
        delete {_i}
        set {_i} to loop-value parsed as a number
        {_i} is set
        set {_i} to round({_i})
        replace every "%loop-value%" in {_str} with "%{_i}%"

        replace every " seconds" in {_str} with " SECONDS"
        replace every " second" in {_str} with " SECOND"

        replace every " minutes" in {_str} with " MINUTES"
        replace every " minute" in {_str} with " MINUTE"

        replace every " hours" in {_str} with " HOURS"
        replace every " hour" in {_str} with " HOUR"

        replace every " days" in {_str} with " DAYS"
        replace every " day" in {_str} with " HOUR"

    return "%{_str}%"


command /reports <offline player>:
    permission: easycore.reports
    permission message: {@NO_PERMISSION}
    aliases: easycore:reports, easycore:checkreports, checkreports
    usage: &cInvalid usage! /reports <player>
    trigger:
        if {report::target::%arg 1's uuid%} is set:
            loop {reports::%arg 1's uuid%::*}:
                send loop-value
        else:
            set {_m} to "{@REPORT-DOESNT-HAVE}"
            set {_mm} to replacePlaceholders("report", {_m}, arg 1)
            send {_mm}

command /clearreports <offline player>:
    permission: easycore.clearreports
    aliases: easycore:clearreports, easycore:reportclear, reportclear
    permission message: {@NO_PERMISSION}
    usage: &cInvalid usage! /clearreports <player>
    trigger:
        if {report::target::%arg 1's uuid%} is set:
            delete {report::target::%arg 1's uuid%}
            delete {report::reason::%arg 1's uuid%}
            delete {report::reporter::%arg 1's uuid%}
            delete {report::date::%arg 1's uuid%}
            delete {reports::%arg 1's uuid%::*}
            set {_m} to "{@REPORT-CLEAR}"
            set {_mm} to replacePlaceholders("report", {_m}, arg 1)
            send {_mm}
        else:
            set {_m} to "{@REPORT-DOESNT-HAVE}"
            set {_mm} to replacePlaceholders("report", {_m}, arg 1)
            send {_mm}




function reportPlayer(target: player, p: player, reason: text):
    set {_message} to "{@REPORT-TO-PLAYER}"
    set {_message1} to "{@REPORT-CHECK}"
    set {_message2} to "{@REPORT-FORMAT}"

    set {_c} to getPlayerColor({_p})
    set {_ct} to getPlayerColor({_target})

    set {report::target::%{_target}'s uuid%} to "%{_ct}%%{_target}%"
    set {report::reason::%{_target}'s uuid%} to {_reason}
    set {report::reporter::%{_target}'s uuid%} to "%{_c}%%{_p}%"
    set {report::date::%{_target}'s uuid%} to now

    # logs report
    set {_actualmessage1} to replacePlaceholders("report", {_message1}, {_target})
    add "%{_actualmessage1}%" to {reports::%{_target}'s uuid%::*}

    # sends report to staff
    set {_actualmessage2} to replacePlaceholders("report", {_message2}, {_target})
    send "%{_actualmessage2}%" to all players where [input has permission "easycore.reports"]

    # send report success message
    set {_actualmessage} to replacePlaceholders("report", {_message}, {_target})
    send "%{_actualmessage}%" to {_p}


command /getMyRank:
    permission: easycore.debug
    permission message: {@NO_PERMISSION}
    aliases: easycore:getMyRank
    trigger:
        send "Your prefix is: %colored {data::ranks::player::%player's uuid%::prefix}%"
        send "Your suffix is: %{data::ranks::player::%player's uuid%::suffix}%"
        send "Your color is: %colored {data::ranks::player::%player's uuid%::color}%this"
        send "Your group is: %{data::ranks::player::%player's uuid%::group}%"


command /list:
    aliases: easycore:list
    permission: easycore.list
    permission message: {@NO_PERMISSION}
    trigger:
        set {_m} to "{@LIST-ALL-FORMAT}"
        set {_mm} to replacePlaceholders("list", {_m}, player)
        send {_mm}


command /gamemode [<text>] [<offline player>]:
    aliases: easycore:gm, gm, easycore:gamemode
    permission: easycore.gamemode
    permission message: {@NO_PERMISSION}
    trigger:
        if arg 1 is "survival" or "0" or "s":
            if arg 2 is not set:
                if player's gamemode = survival:
                    set {_q} to "{@ALREADY-HAVE}"
                    set {_m} to replacePlaceholders("gamemode_survival", {_q}, player)
                    send {_m}
                    stop
                else:
                    set {_q} to "{@UPDATED}"
                    set {_m} to replacePlaceholders("gamemode_survival", {_q}, player)
                    send {_m}
                    set player's gamemode to Survival
            else if arg 2 is set:
                if arg 2 is online:
                    if arg 2's gamemode = survival:
                        set {_q} to "{@ALREADY-HAVE-OTHER}"
                        set {_m} to replacePlaceholders("gamemode_survival", {_q}, arg 2)
                        send {_m}
                        stop
                    else:
                        set {_q} to "{@UPDATED-OTHER-SENDER}"
                        set {_m} to replacePlaceholders("gamemode_survival", {_q}, arg 2)
                        send {_m} to player

                        set {_5} to "{@UPDATED-OTHER-TARGET}"
                        set {_6} to replacePlaceholders("gamemode_survival", {_5}, player)
                        send {_6} to arg 2


                        set player's gamemode to survival
                else:
                    send "{@PLAYER_NOT_ONLINE}"
        else if arg 1 is "creative" or "1" or "c":
            if arg 2 is not set:
                if player's gamemode = creative:
                    set {_q} to "{@ALREADY-HAVE}"
                    set {_m} to replacePlaceholders("gamemode_creative", {_q}, player)
                    send {_m}
                    stop
                else:
                    set {_q} to "{@UPDATED}"
                    set {_m} to replacePlaceholders("gamemode_creative", {_q}, player)
                    send {_m}
                    set player's gamemode to creative
            else if arg 2 is set:
                if arg 2 is online:
                    if arg 2's gamemode = creative:
                        set {_q} to "{@ALREADY-HAVE-OTHER}"
                        set {_m} to replacePlaceholders("gamemode_creative", {_q}, arg 2)
                        send {_m}
                        stop
                    else:
                        set {_q} to "{@UPDATED-OTHER-SENDER}"
                        set {_m} to replacePlaceholders("gamemode_creative", {_q}, arg 2)
                        send {_m} to player

                        set {_5} to "{@UPDATED-OTHER-TARGET}"
                        set {_6} to replacePlaceholders("gamemode_creative", {_5}, player)
                        send {_6} to arg 2


                        set player's gamemode to creative
                else:
                    send "{@PLAYER_NOT_ONLINE}"
        else if arg 1 is "adventure" or "2" or "a":
            if arg 2 is not set:
                if player's gamemode = adventure:
                    set {_q} to "{@ALREADY-HAVE}"
                    set {_m} to replacePlaceholders("gamemode_adventure", {_q}, player)
                    send {_m}
                    stop
                else:
                    set {_q} to "{@UPDATED}"
                    set {_m} to replacePlaceholders("gamemode_adventure", {_q}, player)
                    send {_m}
                    set player's gamemode to adventure
            else if arg 2 is set:
                if arg 2 is online:
                    if arg 2's gamemode = adventure:
                        set {_q} to "{@ALREADY-HAVE-OTHER}"
                        set {_m} to replacePlaceholders("gamemode_adventure", {_q}, arg 2)
                        send {_m}
                        stop
                    else:
                        set {_q} to "{@UPDATED-OTHER-SENDER}"
                        set {_m} to replacePlaceholders("gamemode_adventure", {_q}, arg 2)
                        send {_m} to player

                        set {_5} to "{@UPDATED-OTHER-TARGET}"
                        set {_6} to replacePlaceholders("gamemode_adventure", {_5}, player)
                        send {_6} to arg 2


                        set player's gamemode to adventure
                else:
                    send "{@PLAYER_NOT_ONLINE}"
        else if arg 1 is "spectator" or "3" or "spec":
            if arg 2 is not set:
                if player's gamemode = spectator:
                    set {_q} to "{@ALREADY-HAVE}"
                    set {_m} to replacePlaceholders("gamemode_spectator", {_q}, player)
                    send {_m}
                    stop
                else:
                    set {_q} to "{@UPDATED}"
                    set {_m} to replacePlaceholders("gamemode_spectator", {_q}, player)
                    send {_m}
                    set player's gamemode to spectator
            else if arg 2 is set:
                if arg 2 is online:
                    if arg 2's gamemode = spectator:
                        set {_q} to "{@ALREADY-HAVE-OTHER}"
                        set {_m} to replacePlaceholders("gamemode_spectator", {_q}, arg 2)
                        send {_m}
                        stop
                    else:
                        set {_q} to "{@UPDATED-OTHER-SENDER}"
                        set {_m} to replacePlaceholders("gamemode_spectator", {_q}, arg 2)
                        send {_m} to player

                        set {_5} to "{@UPDATED-OTHER-TARGET}"
                        set {_6} to replacePlaceholders("gamemode_spectator", {_5}, player)
                        send {_6} to arg 2


                        set player's gamemode to spectator
                else:
                    send "{@PLAYER_NOT_ONLINE}"
        else if arg 1 is not "survival" or "adventure" or "creative" or "spectator" or "0" or "1" or "2" or "3" or "c" or "a" or "spec" or "s":
            send "{@WRONG}" to player

command /gmc [<offline player>]:
    permission: easycore.gamemode.creative
    permission message: {@NO_PERMISSION}
    aliases: easycore:gmc
    trigger:
        if arg 1 is not set:
            if player's gamemode = creative:
                set {_q} to "{@ALREADY-HAVE}"
                set {_m} to replacePlaceholders("gamemode_creative", {_q}, player)
                send {_m}
                stop
            else:
                set {_q} to "{@UPDATED}"
                set {_m} to replacePlaceholders("gamemode_creative", {_q}, player)
                send {_m} to player
                set player's gamemode to creative
        else if arg 1 is set:
            if arg 1 is online:
                if arg 1's gamemode = creative:
                    set {_q} to "{@ALREADY-HAVE-OTHER}"
                    set {_m} to replacePlaceholders("gamemode_creative", {_q}, arg 1)
                    send {_m}
                    stop

                else:
                    set {_q} to "{@UPDATED-OTHER-SENDER}"
                    set {_m} to replacePlaceholders("gamemode_creative", {_q}, arg 1)
                    send {_m} to player

                    set {_5} to "{@UPDATED-OTHER-TARGET}"
                    set {_6} to replacePlaceholders("gamemode_creative", {_5}, player)
                    send {_6} to arg 1


                    set arg 1's gamemode to creative
            else:
                send "{@PLAYER_NOT_ONLINE}"

command /gms [<offline player>]:
    permission: easycore.gamemode.survival
    permission message: {@NO_PERMISSION}
    aliases: easycore:gms
    trigger:
        if arg 1 is not set:
            if player's gamemode = survival:
                set {_q} to "{@ALREADY-HAVE}"
                set {_m} to replacePlaceholders("gamemode_survival", {_q}, player)
                send {_m}
                stop
            else:
                set {_q} to "{@UPDATED}"
                set {_m} to replacePlaceholders("gamemode_survival", {_q}, player)
                send {_m} to player
                set player's gamemode to survival
        else if arg 1 is set:
            if arg 1 is online:
                if arg 1's gamemode = survival:
                    set {_q} to "{@ALREADY-HAVE-OTHER}"
                    set {_m} to replacePlaceholders("gamemode_survival", {_q}, arg 1)
                    send {_m}
                    stop
                else:
                    set {_q} to "{@UPDATED-OTHER-SENDER}"
                    set {_m} to replacePlaceholders("gamemode_survival", {_q}, arg 1)
                    send {_m} to player

                    set {_5} to "{@UPDATED-OTHER-TARGET}"
                    set {_6} to replacePlaceholders("gamemode_survival", {_5}, player)
                    send {_6} to arg 1


                    set arg 1's gamemode to survival
            else:
                send "{@PLAYER_NOT_ONLINE}"

command /gma [<offline player>]:
    permission: easycore.gamemode.adventure
    permission message: {@NO_PERMISSION}
    aliases: easycore:gma
    trigger:
        if arg 1 is not set:
            if player's gamemode = adventure:
                set {_q} to "{@ALREADY-HAVE}"
                set {_m} to replacePlaceholders("gamemode_adventure", {_q}, player)
                send {_m}
                stop
            else:
                set {_q} to "{@UPDATED}"
                set {_m} to replacePlaceholders("gamemode_adventure", {_q}, player)
                send {_m} to player
                set player's gamemode to adventure
        else if arg 1 is set:
            if arg 1 is online:
                if arg 1's gamemode = adventure:
                    set {_q} to "{@ALREADY-HAVE-OTHER}"
                    set {_m} to replacePlaceholders("gamemode_adventure", {_q}, arg 1)
                    send {_m}
                    stop
                else:
                    set {_q} to "{@UPDATED-OTHER-SENDER}"
                    set {_m} to replacePlaceholders("gamemode_adventure", {_q}, arg 1)
                    send {_m} to player

                    set {_5} to "{@UPDATED-OTHER-TARGET}"
                    set {_6} to replacePlaceholders("gamemode_adventure", {_5}, player)
                    send {_6} to arg 1


                    set arg 1's gamemode to adventure
            else:
                send "{@PLAYER_NOT_ONLINE}"

command /gmsp [<offline player>]:
    permission: easycore.gamemode.spectator
    permission message: {@NO_PERMISSION}
    aliases: easycore:gmsp
    trigger:
        if arg 1 is not set:
            if player's gamemode = spectator:
                set {_q} to "{@ALREADY-HAVE}"
                set {_m} to replacePlaceholders("gamemode_spectator", {_q}, player)
                send {_m}
                stop
            else:
                set {_q} to "{@UPDATED}"
                set {_m} to replacePlaceholders("gamemode_spectator", {_q}, player)
                send {_m} to player
                set player's gamemode to spectator
        else if arg 1 is set:
            if arg 1 is online:
                if arg 1's gamemode = spectator:
                    set {_q} to "{@ALREADY-HAVE-OTHER}"
                    set {_m} to replacePlaceholders("gamemode_spectator", {_q}, arg 1)
                    send {_m}
                    stop
                else:
                    set {_q} to "{@UPDATED-OTHER-SENDER}"
                    set {_m} to replacePlaceholders("gamemode_spectator", {_q}, arg 1)
                    send {_m} to player

                    set {_5} to "{@UPDATED-OTHER-TARGET}"
                    set {_6} to replacePlaceholders("gamemode_spectator", {_5}, player)
                    send {_6} to arg 1


                    set arg 1's gamemode to spectator
            else:
                send "{@PLAYER_NOT_ONLINE}"


command /godmode [<offline player>]:
    permission: easycore.godmode
    permission message: {@NO_PERMISSION}
    aliases: god, easycore:god, easycore:godmode
    trigger:
        if arg 1 is not set:
            if {godmode::%player%} is not set:
                set {godmode::%player%} to true
                set {_5} to "{@GOD-ENABLED}"
                send {_5} to player
                stop
            else:
                delete {godmode::%player%}
                set {_5} to "{@GOD-DISABLED}"
                send {_5} to player
                stop
        else:
            if arg 1 is online:
                if {godmode::%arg 1%} is not set:
                    set {godmode::%arg 1%} to true
                    set {_5} to "{@GOD-ENABLED-OTHER-SENDER}"
                    set {_6} to replacePlaceholders("god_enable", {_5}, arg 1)
                    send {_6} to player
                    stop
                else:
                    delete {godmode::%arg 1%}
                    set {_7} to "{@GOD-DISABLED-OTHER-SENDER}"
                    set {_8} to replacePlaceholders("god_disable", {_7}, arg 1)
                    send {_8} to player
            else:
                send "{@PLAYER_NOT_ONLINE}"


on damage:
    {godmode::%attacker%} is true
    cancel event
on damage:
    {godmode::%victim%} is true
    cancel event

on join:
    player has permission "easycore.staffmessages"
    set {_7} to "{@STAFF-CONNECT}"
    set {_8} to replacePlaceholders("staff_connect", {_7}, player)
    send "%{_8}%" to all players where [input has permission "easycore.staffmessages"]
    stop
on quit:
    player has permission "easycore.staffmessages"
    set {_7} to "{@STAFF-DISCONNECT}"
    set {_8} to replacePlaceholders("staff_disconnect", {_7}, player)
    send "%{_8}%" to all players where [input has permission "easycore.staffmessages"]


command /staffchat [<text>]:
    aliases: sc, easycore:sc, easycore:staffchat
    permission: easycore.staffchat
    permission message: {@NO_PERMISSION}
    trigger:
        if arg 1 is not set:
            if {staffchat::%player's uuid%} is not set:
                set {staffchat::%player's uuid%} to true
                set {_t} to "{@STAFF-CHAT-ENABLED}"
                delete {adminchat::%player's uuid%}
                send {_t}
                stop
            else:
                delete {staffchat::%player's uuid%}
                set {_t} to "{@STAFF-CHAT-DISABLED}"
                send {_t}
        else:
            set {_m} to "{@STAFF-CHAT-FORMAT}"
            set {_am} to replacePlaceholders("staff_chat_format", {_m}, player)
            replace all "[message]" in {_am} with arg 1
            send {_am} to all players where [input has permission "easycore.staffmessages"]
command /adminchat [<text>]:
    aliases: ac, easycore:ac, easycore:adminchat
    permission: easycore.adminchat
    permission message: {@NO_PERMISSION}
    trigger:
        if arg 1 is not set:
            if {adminchat::%player's uuid%} is not set:
                set {adminchat::%player's uuid%} to true
                delete {staffchat::%player's uuid%}
                set {_t} to "{@ADMIN-CHAT-ENABLED}"
                send {_t}
                stop
            else:
                delete {adminchat::%player's uuid%}
                set {_t} to "{@ADMIN-CHAT-DISABLED}"
                send {_t}
        else:
            set {_m} to "{@ADMIN-CHAT-FORMAT}"
            set {_am} to replacePlaceholders("admin_chat_format", {_m}, player)
            replace all "[message]" in {_am} with arg 1
            send {_am} to all players where [input has permission "easycore.adminmessages"]




on chat:
    if {adminchat::%player's uuid%} is true:
        cancel event
        set {_m} to "{@ADMIN-CHAT-FORMAT}"
        set {_am} to replacePlaceholders("ADMIN_chat_format", {_m}, player)
        replace all "[message]" in {_am} with message
        send {_am} to all players where [input has permission "easycore.adminmessages"]
        stop
    else if {staffchat::%player's uuid%} is true:
        cancel event
        set {_m} to "{@STAFF-CHAT-FORMAT}"
        set {_am} to replacePlaceholders("staff_chat_format", {_m}, player)
        replace all "[message]" in {_am} with message
        send {_am} to all players where [input has permission "easycore.staffmessages"]
        stop
    else:
        if isMuted(player) is true:
            if {mute::%uuid of player%::duration} is "Permanent":
                cancel event
                muteChatBlock(player, "forever")
            else:
                cancel event
                muteChatBlock(player, "temp")
        else:
            uncancel event
            set {_prefix} to getPlayerPrefix(player)
            set the chat format to "%colored {_prefix}% &e%player%&7: &f%message%"


command /broadcast <text>:
    aliases: bc, easycore:bc, easycore:broadcast
    permission: easycore.broadcast
    permission message: {@NO_PERMISSION}
    usage: &cMissing message to broadcast! /broadcast <message>
    trigger:
        set {_m} to "{@BROADCAST-FORMAT}"
        replace all "[message]" in {_m} with colored arg 1
        broadcast {_m}


command /clear [<player>]:
    aliases: clearinv, clearinventory, easycore:clearinv, easycore:clearinventory, easycore:clear, ci, easycore:ci
    permission: easycore.broadcast
    permission message: {@NO_PERMISSION}
    trigger:
        if arg 1 is not set:
            set {_q} to amount of items in player's inventory
            clear player's inventory
            set {_m} to "{@CLEAR-SELF}"
            replace all "[total]" in {_m} with "%{_q}%"
            send {_m}
            stop
        else:
            set {_q} to amount of items in arg 1's inventory
            clear arg 1's inventory
            set {_ms} to "{@CLEAR-OTHER-SENDER}"
            set {_ams} to replacePlaceholders("clear-format", {_ms}, arg 1)
            replace all "[total]" in {_ams} with "%{_q}%"
            send {_ams} to player

            set {_mt} to "{@CLEAR-OTHER-TARGET}"
            set {_amt} to replacePlaceholders("clear-format", {_mt}, player)
            replace all "[total]" in {_amt} with "%{_q}%"
            send {_amt} to arg 1

command /ping [<player>]:
    aliases: easycore:ping, easycore:ms, ms
    trigger:
        if arg 1 is not set:
            set {_m} to "{@PING-SELF}"
            set {_m} to replacePlaceholders("ping", {_m}, player)
            send {_m}
        else:
            set {_t} to "{@PING-OTHER}"
            set {_t} to replacePlaceholders("ping", {_t}, arg 1)
            send {_t}


command /heal [<player>]:
    permission: easycore.heal
    permission message: {@NO_PERMISSION}
    aliases: easycore:heal
    trigger:
        if arg 1 is not set:
            heal player
            set {_m} to "{@HEAL}"
            set {_m} to replaceOtherPlaceholders("heal", {_m}, player, player)
            send {_m}

            set {_staff} to "{@HEAL-STAFF}"
            set {_me} to replaceOtherPlaceholders("heal", {_staff}, player, player)
            send {_me} to all players where [input has permission "easycore.staffmessages"]
        else:
            heal arg 1
            set {_m} to "{@HEAL}"
            set {_m} to replaceOtherPlaceholders("heal", {_m}, player, arg 1)
            send {_m}

            set {_staff} to "{@HEAL-STAFF}"
            set {_me} to replaceOtherPlaceholders("heal", {_staff}, player, arg 1)
            send {_me} to all players where [input has permission "easycore.staffmessages"]

command /feed [<player>]:
    permission: easycore.feed
    permission message: {@NO_PERMISSION}
    aliases: easycore:feed, saturate, easycore:saturate
    trigger:
        if arg 1 is not set:
            feed player
            set {_m} to "{@FEED}"
            set {_m} to replaceOtherPlaceholders("feed", {_m}, player, player)
            send {_m}

            set {_staff} to "{@FEED-STAFF}"
            set {_me} to replaceOtherPlaceholders("feed", {_staff}, player, player)
            send {_me} to all players where [input has permission "easycore.staffmessages"]
        else:
            feed arg 1
            set {_m} to "{@FEED}"
            set {_m} to replaceOtherPlaceholders("feed", {_m}, player, arg 1)
            send {_m}

            set {_staff} to "{@FEED-STAFF}"
            set {_me} to replaceOtherPlaceholders("feed", {_staff}, player, arg 1)
            send {_me} to all players where [input has permission "easycore.staffmessages"]

function replaceOtherPlaceholders(type: text, value: text, p: player, t: player) :: text:
    if {_type} = "heal":
        set {_c} to getPlayerColor({_p})
        set {_ct} to getPlayerColor({_t})
        replace all "[target-without]" in {_value} with "%{_t}%"
        replace all "[target-with]" in {_value} with "%{_ct}%%{_t}%"
        replace all "[player]" in {_value} with "%{_c}%&o%{_p}%"

        return "%{_value}%"
    if {_type} = "feed":
        set {_c} to getPlayerColor({_p})
        set {_ct} to getPlayerColor({_t})
        replace all "[target-without]" in {_value} with "%{_t}%"
        replace all "[target-with]" in {_value} with "%{_ct}%%{_t}%"
        replace all "[player]" in {_value} with "%{_c}%&o%{_p}%"

        return "%{_value}%"

    if {_type} = "tp_staff_format":
        set {_c} to getPlayerColor({_p})
        set {_ct} to getPlayerColor({_t})
        replace all "[target]" in {_value} with "%{_t}%"
        replace all "[player]" in {_value} with "%{_ct}%&o%{_p}%"
        replace all "[player-without]" in {_value} with "%{_p}%"

        return "%{_value}%"


function replacePlaceholders(type: text, value: text, p: player) :: text:
    if {_type} = "report":
        set {_c} to getPlayerColor({_p})
        replace every "[reporter]" in {_value} with "%{report::reporter::%{_p}'s uuid%}%"
        replace every "[reason]" in {_value} with "%{report::reason::%{_p}'s uuid%}%"
        replace every "[reported]" in {_value} with "%{report::target::%{_p}'s uuid%}%"
        replace every "[target]" in {_value} with "%{_c}%%{_p}%"
        replace every "[date]" in {_value} with "%{report::date::%{_p}'s uuid%}%"

        return "%{_value}%"
    else if {_type} = "list":
        replace every "[players]" in {_value} with "%number of all players%"
        replace every "[max]" in {_value} with "%max players%"
        loop all players:
            set {_a} to getPlayerColor(loop-player)
            replace every "[list]" in {_value} with "%{_a}%%Loop-player%"
        return "%{_value}%"
    else if {_type} = "gamemode_survival":
        set {_ca} to getPlayerColor({_p})
        replace every "[gamemode]" in {_value} with "Survival"
        replace every "[other]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[sender]" in {_value} with "%{_ca}%%{_p}%"

        return "%{_value}%"
    else if {_type} = "gamemode_creative":
        set {_ca} to getPlayerColor({_p})
        replace every "[gamemode]" in {_value} with "Creative"
        replace every "[other]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[sender]" in {_value} with "%{_ca}%%{_p}%"

        return "%{_value}%"
    else if {_type} = "gamemode_spectator":
        set {_ca} to getPlayerColor({_p})
        replace every "[gamemode]" in {_value} with "Spectator"
        replace every "[other]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[sender]" in {_value} with "%{_ca}%%{_p}%"

        return "%{_value}%"
    else if {_type} = "gamemode_adventure":
        set {_ca} to getPlayerColor({_p})
        replace every "[gamemode]" in {_value} with "Adventure"
        replace every "[other]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[sender]" in {_value} with "%{_ca}%%{_p}%"

        return "%{_value}%"
    else if {_type} = "god_enable":
        set {_ca} to getPlayerColor({_p})
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"
    else if {_type} = "god_disable":
        set {_ca} to getPlayerColor({_p})
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"

    else if {_type} = "staff_connect":
        set {_ca} to getPlayerColor({_p})
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"
    else if {_type} = "staff_disconnect":
        set {_ca} to getPlayerColor({_p})
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"
    else if {_type} = "staff_chat_format":
        set {_ca} to getPlayerColor({_p})
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"
    else if {_type} = "admin_chat_format":
        set {_ca} to getPlayerColor({_p})
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"
    else if {_type} = "clear-format":
        set {_ca} to getPlayerColor({_p})
        replace every "[target]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[player]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"
        stop
    else if {_type} = "ping":
        set {_ca} to getPlayerColor({_p})
        replace every "[target]" in {_value} with "%{_ca}%%{_p}%"
        replace every "[ping]" in {_value} with "%{_p}'s ping%"
        return "%{_value}%"
    else if {_type} = "skull":
        set {_ca} to getPlayerColor({_p})
        replace every "[player]" in {_value} with "%{_p}%"
        return "%{_value}%"
    else if {_type} = "tp_target":
        set {_ca} to getPlayerColor({_p})
        replace every "[target]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"
    else if {_type} = "tp_here_sender":
        set {_ca} to getPlayerColor({_p})
        replace every "[target]" in {_value} with "%{_ca}%%{_p}%"
        return "%{_value}%"





command /skull [<offline player>]:
    permission: easycore.skull
    permission message: {@NO_PERMISSION}
    aliases: head, easycore:skull, easycore:head
    trigger:
        if arg 1 is not set:
            set {_m} to "{@SKULL-GIVEN}"
            set {_player} to replacePlaceholders("skull", {_m}, player)
            give 1 of skull of "%player%" parsed as offline player named "&d%player%&d's Skull" to player
            send {_player} to player
            stop
        else:
            set {_m} to "{@SKULL-GIVEN}"
            set {_player} to replacePlaceholders("skull", {_m}, arg 1)
            give 1 of skull of "%arg 1%" parsed as offline player named "&d%arg 1%&d's Skull" to player
            send {_player} to player

command /more:
    usage: &cToo many arguments detected! /more
    aliases: max, easycore:max, easycore:more
    permission: easycore.more
    permission message: {@NO_PERMISSION}
    trigger:
        if player's held item is air:
            send "{@INVALID-MORE-ITEM}"
            stop
        else:
            set {_item} to player's held item
            set player's held item to 64 of {_item}
            send "{@MORE-SUCCESS}"




command /teleport <player>:
    aliases: easycore:teleport, tp, easycore:tp
    permission: easycore.teleport
    permission message: {@NO_PERMISSION}
    usage: &cMissing a player! /teleport <player>
    trigger:
        teleport player to arg 1
        set {_m} to "{@TP-TARGET}"
        set {_am} to replacePlaceholders("tp_target", {_m}, arg 1)
        send {_am}
        # -----------
        set {_mm} to "{@TP-PLAYER-STAFF-FORMAT}"
        set {_staff} to replaceOtherPlaceholders("tp_staff_format", {_mm}, player, arg 1)
        send {_staff} to all players where [input has permission "easycore.staffmessages"]

command /tphere <player>:
    aliases: easycore:tphere, teleporthere, easycore:teleporthere
    permission: easycore.tphere
    permission message: {@NO_PERMISSION}
    usage: &cMissing a player! /tphere <player>
    trigger:
        teleport arg 1 to player
        set {_m} to "{@TP-HERE-SENDER}"
        set {_am} to replacePlaceholders("tp_here_sender", {_m}, arg 1)
        send {_am}
        # -----------
        set {_mm} to "{@TP-HERE-STAFF-FORMAT}"
        set {_staff} to replaceOtherPlaceholders("tp_staff_format", {_mm}, player, arg 1)
        send {_staff} to all players where [input has permission "easycore.staffmessages"]

command /teleportpos <number> <number> <number> [<player>]:
    usage: &cImproper usage! Correct usage: /teleportpos <x> <y> <z> [player]
    aliases: easycore:teleportpos, tppos, easycore:tppos, teleportposition, easycore:teleportposition, tpposition, easycore:tpposition
    permission: easycore.teleportpos
    permission message: {@NO_PERMISSION}
    trigger:
        if arg 4 is not set:
            set {_m} to "{@TO-COORDS}"
            replace all "[x]" in {_m} with "%arg 1%"
            replace all "[y]" in {_m} with "%arg 2%"
            replace all "[z]" in {_m} with "%arg 3%"
            teleport player to location at arg 1, arg 2, arg 3 in world "%player's world%"
            send {_m}
            set {_sm} to "{@TO-COORDS-STAFF}"
            set {_color} to getPlayerColor(player)
            replace all "[x]" in {_sm} with "%arg 1%"
            replace all "[y]" in {_sm} with "%arg 2%"
            replace all "[z]" in {_sm} with "%arg 3%"
            replace all "[player]" in {_sm} with "%{_color}%&o%player%"
            send {_sm} to all players where [input has permission "easycore.staffmessages"]
            stop
        else:
            set {_m} to "{@TO-COORDS-SENDER}"
            replace all "[x]" in {_m} with "%arg 1%"
            replace all "[y]" in {_m} with "%arg 2%"
            replace all "[z]" in {_m} with "%arg 3%"
            replace all "[target]" in {_m} with "%arg 4%"
            teleport arg 4 to location at arg 1, arg 2, arg 3 in world "%player's world%"
            send {_m}
            set {_sm} to "{@TO-COORDS-STAFF-OTHER}"
            set {_color} to getPlayerColor(player)
            replace all "[x]" in {_sm} with "%arg 1%"
            replace all "[y]" in {_sm} with "%arg 2%"
            replace all "[z]" in {_sm} with "%arg 3%"
            replace all "[player]" in {_sm} with "%{_color}%&o%player%"
            replace all "[target]" in {_sm} with "%arg 4%"
            send {_sm} to all players where [input has permission "easycore.staffmessages"]




command /teleportoffline <offline player>:
    usage: &cImproper usage! Correct usage: /teleportoffline <player>
    aliases: tpoffline, teleportlastlocation, tplastlocation, easycore:tpoffline, easycore:teleportlastlocation, easycore:tplastlocation, easycore:teleportoffline
    permission: easycore.teleportoffline
    permission message: {@NO_PERMISSION}
    trigger:
        if {lastloc::%arg 1's uuid%} is not set:
            send "{@OFFLINE-PLAYER-FAILED}"
            stop
        else:
            teleport player to {lastloc::%arg 1's uuid%}
            set {_m} to "{@OFFLINE-PLAYER-SUCCESS}"
            replace all "[player]" in {_m} with "%arg 1%"
            send {_m}

on quit:
    set {lastloc::%player's uuid%} to player's location


command /vanish [<player>]:
    permission: easycore.vanish
    permission message: {@NO_PERMISSION}
    aliases: v, invis, easycore:v, easycore:invis, easycore:vanish
    executable by: player
    trigger:
        if arg 1 is not set:
            if {vanish::%player%} is not set:
                hide the player from all players
                set {prevPrefix::%player's uuid%} to getPlayerPrefix(player)
                set {_tag} to "{@VANISH-TAG}"
                replace all "[player]" in {_tag} with "%player%"
                set player's tablist name to "%{_tag}%"
                set player's default nametag to "%{_tag}%"
                send "{@VANISH-SELF}"
                set {vanish::%player%} to true
                add player to {vanished::*}
                set {_m} to "{@VANISH-SELF-STAFF}"
                set {_color} to getPlayerColor(player)
                replace all "[player]" in {_m} with "%{_color}%&o%player%"
                send {_m} to all players where [input has permission "easycore.staffmessages"]
                stop
            else:
                reveal the player from all players
                send "{@UNVANISH-SELF}"
                delete {vanish::%player%}
                set {_color} to getPlayerColor(player)
                remove player from {vanished::*}

                set player's tablist name to "%colored {_prefix}%%player%"
                set player's default nametag to "%{_color}%%player%"

                set {_m} to "{@UNVANISH-SELF-STAFF}"
                set {_color} to getPlayerColor(player)
                replace all "[player]" in {_m} with "%{_color}%&o%player%"
                send {_m} to all players where [input has permission "easycore.staffmessages"]
                stop
        else:
            if {vanish::%arg 1%} is not set:
                hide the arg 1 from all players
                set {prevPrefix::%arg 1's uuid%} to getPlayerPrefix(arg 1)
                set {_tag} to "{@VANISH-TAG}"
                replace all "[player]" in {_tag} with "%arg 1%"
                set arg 1's tablist name to "%{_tag}%"
                set arg 1's default nametag to "%{_tag}%"
                set {_am} to "{@VANISH-OTHER}"
                replace all "[target]" in {_am} with "%arg 1%"
                send {_am} to player

                send "{@VANISH-SELF}" to arg 1
                set {vanish::%arg 1%} to true
                add arg 1 to {vanished::*}
                set {_m} to "{@VANISH-OTHER-STAFF}"
                set {_color} to getPlayerColor(arg 1)
                replace all "[player]" in {_m} with "%{_color}%&o%player%"
                replace all "[target]" in {_m} with "%arg 1%"
                send {_m} to all players where [input has permission "easycore.staffmessages"]
                stop
            else:

                reveal the arg 1 from all players
                set {_am} to "{@UNVANISH-OTHER}"
                replace all "[target]" in {_am} with "%arg 1%"
                send {_am} to player
                send "{@UNVANISH-SELF}" to arg 1
                delete {vanish::%arg 1%}
                set {_color} to getPlayerColor(arg 1)
                remove arg 1 from {vanished::*}

                set arg 1's tablist name to "%colored {_prefix}%%arg 1%"
                set arg 1's default nametag to "%{_color}%%arg 1%"

                set {_m} to "{@UNVANISH-OTHER-STAFF}"
                set {_color} to getPlayerColor(arg 1)
                replace all "[player]" in {_m} with "%{_color}%&o%player%"
                replace all "[target]" in {_m} with "%arg 1%"
                send {_m} to all players where [input has permission "easycore.staffmessages"]

on quit:
    if {vanish::%player%} is set:
        delete {vanish::%player%}
        remove player from {vanished::*}

on join:
    if player has permission "easycore.vanish":
        execute player command "vanish"
every 1 second:
	loop all players:
		if {vanish::%loop-player%} is true:
			loop all players:
				if loop-player-2 is op:
					reveal the loop-player-1 from loop-player-2























































on tab complete of "/gamemode":
    set tab completions for position 1 to "creative", "spectator" and "adventure" and "survival"
on tab complete of "/gm":
    set tab completions for position 1 to "creative", "spectator" and "adventure" and "survival"
on tab complete of "/easycore:gm":
    set tab completions for position 1 to "creative", "spectator" and "adventure" and "survival"
on tab complete of "/easycore:gamemode":
    set tab completions for position 1 to "creative", "spectator" and "adventure" and "survival"
on tab complete of "/tpoffline":
    loop all offline players:
        add loop-value to tab completions
on tab complete of "/rank":
    set tab completions for position 1 to "list", "group", "creategroup", "deletegroup", "version", "help", "user"
    if tab arg-1 = "group":
        set tab completions for position 3 to "setdisplayname", "setprefix" and "setsuffix", "setpriority", "setcolor", "setbold", "setitalic", "setdefault"
    else if tab arg-1 = "deletegroup":
        loop {data::ranks::ranklist::*}:
            add loop-value to tab completions